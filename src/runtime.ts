import { EMPTY_OBJECT, isArray } from './utils';
import { InstanceAgent, InstanceType } from './instanceAgent';
import { agentMap, agentStack } from './instanceAgentPool';
import type { ShallowReactive } from '@vue/reactivity';
import type { IAnyObject } from './utils';
import type { IOptionalMethodOptions } from './methodsAgent'; 

export type IDataOption = WechatMiniprogram.Component.DataOption;
export type IPropertyOption = WechatMiniprogram.Component.PropertyOption;

export type IPropertyOptionToData<P extends IPropertyOption> = WechatMiniprogram.Component.PropertyOptionToData<P>;

export type ISetupContext<TProperty extends IPropertyOption> = {
  /**
   * The reactive properties.
   */
  props: ShallowReactive< IPropertyOptionToData<TProperty> >;
  /**
   * The initial data returned by `data()`, it's not reactive.
   */
  data: IAnyObject;
};

export type ISetup<TProperty extends IPropertyOption> = (context?: ISetupContext<TProperty>) => { [key: string]: any } | void;

export type IUseBehavior = () => WechatMiniprogram.Behavior.BehaviorIdentifier;

export interface IDefineComponentOptions<TProperty extends IPropertyOption> {
  /**
   * The same as official `options`.
   */
  options?: WechatMiniprogram.Component.OtherOption['options'];
  /**
   * Accepts behaviors generated by `useBehavior()` or defined by offical `Behavior()`.
   */
  behaviors?: WechatMiniprogram.Component.OtherOption['behaviors'] | IUseBehavior[];
  /**
   * The same as offical `properties`.
   */
  properties?: TProperty;
  /**
   * Optional methods (like `onShareAppMessage,onShareTimelin,onPageScroll`) must be declared here,
   * otherwise they will not be difined in the component.
   */
  useMethod?: IOptionalMethodOptions;
  /**
   * Returns initial data.
   * 
   * It's OPTIONAL but useful when you need default data in WXML when the component is created.
   * 
   * The return data of `setup()` will overwrite the initial data when the component is attached.
   * So you don't need to care about or rely on this initial data.
   */
  data?: () => IAnyObject;
  /**
   * Setup a component by using composition APIs.
   */
  setup: ISetup<TProperty>;
}


function callAgentMethod(
  type: InstanceType,
  wxInstance: WechatMiniprogram.Component.TrivialInstance, 
  method: string, 
  args?: any[]
) {
  // console.info('[runtime] callAgentMethod:', method, wxInstance.is);
  const agent = agentMap.get(type, wxInstance);
  if (!agent) {
    console.warn(`[wx-setup] Fail to call \`${method}()\`.`);
    return;
  }
  agentStack.push(agent);
  const ret = agent.methods[method](...args);
  agentStack.pop();
  return ret;
}

export function createComponentOptions<TProperty extends IPropertyOption>(
  options: IDefineComponentOptions<TProperty>, 
  type: InstanceType
) {
  type IWxInstance = WechatMiniprogram.Component.Instance<IAnyObject, TProperty, IAnyObject, IAnyObject>;
  type IProperty = IPropertyOptionToData<TProperty>;
  type IOptions = WechatMiniprogram.Component.Options<IAnyObject, TProperty, IAnyObject, IAnyObject>;

  // Prepare props
  const propsKeys = Object.keys(options.properties || {});

  const applySetup = (wxInstance: IWxInstance) => {
    const agent = new InstanceAgent();
    // console.info('[wx-setup] applySetup() Start', agent.id, wxInstance.is, wxInstance);
    agent.instance = wxInstance;
    agent.instanceType = type;
    agent.useOptionalMethod = options.useMethod || EMPTY_OBJECT;
    agent.useProps(propsKeys);

    agentMap.set(type, wxInstance, agent);
    agentStack.push(agent);

    const ret = options.setup({
      props: agent.props as ShallowReactive<IProperty>,
      data: componentOptions.data,
    });
    if (typeof ret === 'object') {
      const data: IAnyObject = {};
      for (const key in ret) {
        if (typeof ret[key] === 'function') {
          wxInstance[key] = ret[key];
        } else {
          data[key] = ret[key];
        }
      }
      // console.info('[wx-setup] setup() ret data:', data);
      if (Object.keys(data).length > 0) {
        agent.useData(data);
      }
    }

    agentStack.pop();
    // console.info('[wx-setup] applySetup() End', wxInstance.is);
  };

  // Init component options
  const componentOptions: IOptions = {
    behaviors: [],
    observers: {},
    methods: {},
    pageLifetimes: {},
    lifetimes: {
      created() {
        // console.info('[wx-setup] created', type, this.is);
        if (agentMap.has(type, this)) {
          console.debug('[wx-setup] DUPLICATE lifetime: created():', type, this.is);
          return;
        }
        applySetup(this);
        return callAgentMethod(type, this, 'onCreated', []);
      },
      attached() {
        // console.info('[wx-setup] attached', type, this.is);
        const agent = agentMap.get(type, this);
        agent.canSetData = true;
        agent.saveUnsetData();
        return callAgentMethod(type, this, 'onAttached', []);
      },
      detached() {
        callAgentMethod(type, this, 'onDetached', [])
        const agent = agentMap.get(type, this);
        agent.destroy();
        agentMap.delete(type, this);
      }
    },
  };

  // Use options
  if (options.options) {
    componentOptions.options = options.options;
  }

  // Use properties
  if (options.properties) {
    componentOptions.properties = options.properties;
  }

  // Watch properties
  propsKeys.forEach((k) => {
    componentOptions.observers[<string>k] = function(newValue) {
      const agent = agentMap.get(type, this);
      // console.info('[runtime] observers: changed', k, newValue, this.properties[k], newValue === agent.props[k], agent.id);
      if (!agent) { return; }
      if (newValue !== agent.props[k]) {
        // console.info('[runtime] observers: changed', k, newValue, agent.id);
        agent.props[k] = newValue;
      }
    };
  });

  // Use data
  if (typeof options.data === 'function') {
    componentOptions.data = options.data() || undefined;
  }

  // Use behaviors
  if (isArray(options.behaviors)) {
    for (const behavior of options.behaviors) {
      if (typeof behavior === 'function') {
        // It's a `useBehavior()` function
        componentOptions.behaviors.push(behavior());
      } else {
        componentOptions.behaviors.push(behavior);
      }
    }
  }

  // Mapping methods & lifetimes & pageLifetimes
  const useAgentMethods = {
    methods: {
      onLoad: 'onLoad',
      onUnload: 'onUnload',
      onPullDownRefresh: 'onPullDownRefresh',
      onReachBottom: 'onReachBottom',
      onAddToFavorites: 'onAddToFavorites',
      onTabItemTap: 'onTabItemTap',
      onSaveExitState: 'onSaveExitState',
      // Add optional methods (like `onShareAppMessage()`)
      ...(() => {
        const ret: { [k: string]: string } = {};
        if (options.useMethod) {
          for (const key in options.useMethod) {
            if (options.useMethod[key]) {
              ret[key] = key;
            }
          }
        }
        return ret;
      })(),
    },
    lifetimes: {
      ready: 'onReady',
      moved: 'onMoved',
      error: 'onError',
    },
    pageLifetimes: {
      show: 'onShow',
      hide: 'onHide',
      resize: 'onResize',
    },
  };
  for (const optionKey in useAgentMethods) {
    for (const key in useAgentMethods[optionKey]) {
      componentOptions[optionKey][key] = function(...args) {
        return callAgentMethod(type, this, useAgentMethods[optionKey][key], args);
      };
    }
  }

  // console.info('[wx-setup] componentOptions', componentOptions);
  return componentOptions;
}
